@startuml

class AbstractList<T>

class LinkList<T> {
  '-first :Node
  -counter :int
  add(elem:T)
  addFirst(elem:T)
  get(idx:int) :T
  remove(idx:int)
  size() :int
  getIterator():Iterator<T>
}
LinkList ..> It : <<create>>
AbstractList <|-- LinkList

interface Iterator<T> {
   '+hasNext():boolean
   '+next():T
}

class It<T> {
   '+hasNext():boolean
   '+next():int
}

class Node<T> {
  ~elem :T
  '~next :Node
}

Node <- It : -cur
Node -> Node : ~next
Node -> Node : -prev
'LinkList ..> IntIterator
LinkList +- Node : "  "
LinkList -> Node : -first
LinkList -> Node : -last
LinkList +-- It

Iterator <|. It : "      "

@enduml